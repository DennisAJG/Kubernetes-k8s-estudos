Oque é o Kubernetes:

Partindo do pretesto de docker, usarmos um dockerfile para criar uma imagem e 
sim criarmos um container, porém em muitos casos esse container pode ter 
inumeros problemas.

quando chegarmos em escalabilidade, nos fazermos algumas perguntas:

E se a aplicação falhar?
E se ela precisar escalar?
E se houver multiplos serviços ?
E o Load Balancing ?
E se houver dados sensitives?

devido esses questionamentos, houve o kubernetes que é um 
orquestrafor de containers.


Kubeadm é usado apenas para criar um cluster.
kubelet é um componente que é instalado nas máquinas que vai se comunicar via apiserveler
kubectl é uma ferramentaa nivel de cliente que é usado para comunicação entre os clusters


Conceito de CNI (Container Network Interface):

No Kubernetes, CNI (Container Network Interface) é um padrão e conjunto de plugins para gerenciar redes de contêineres. Ele desempenha um papel central na conectividade de rede entre pods e outros componentes do cluster.

O que é CNI?
Container Network Interface (CNI) é uma especificação desenvolvida pela Cloud Native Computing Foundation (CNCF) que define como configurar redes para contêineres e como remover essa configuração quando os contêineres são destruídos.
Os plugins CNI são usados para implementar políticas de rede no Kubernetes, permitindo a conectividade entre pods e garantindo que as aplicações possam se comunicar corretamente.
Como o CNI funciona no Kubernetes?
No Kubernetes, cada pod possui um endereço IP único. Esse endereço é atribuído por um plugin CNI.
O CNI é responsável por configurar a interface de rede de cada pod e conectar o pod à rede do cluster, seja através de uma sobreposição (overlay network) ou de uma rede direta (underlay network).
Quando um pod é criado:

O kubelet interage com o plugin CNI para configurar a rede do pod.
O plugin CNI configura uma interface de rede (como uma veth pair) e a conecta ao namespace de rede do pod.
O CNI também gerencia a rota de saída do pod para outros pods ou para a internet.

Principais funções do CNI:
Gerenciamento de IPs: Alocar e liberar IPs para os pods.
Conectividade: Estabelecer comunicação entre pods no mesmo nó e em diferentes nós.
Políticas de Rede: Implementar regras de firewall e isolamento entre namespaces.
Integração com SDNs: Permitir o uso de soluções de redes definidas por software.
Plugins CNI populares no Kubernetes
Existem diversos plugins CNI que implementam a especificação CNI com funcionalidades específicas. Alguns dos mais comuns são:

Calico:

Oferece conectividade de rede e segurança com políticas de rede baseadas em IP.
Pode funcionar como uma rede roteada (underlay) ou sobreposição (overlay).
Flannel:

Simples e focado em prover uma rede overlay.
Muito usado em clusters básicos.
Weave Net:

Cria uma rede mesh overlay.
Facilita o isolamento de redes para diferentes namespaces.
Cilium:

Focado em segurança e visibilidade.
Usa eBPF para implementar políticas de rede e roteamento eficiente.
Canal:

Combinação do Flannel para redes overlay e do Calico para políticas de rede.
Kube-Router:

Combina roteamento de rede, políticas e balanceamento de carga.
Vantagens de usar CNI no Kubernetes
Flexibilidade: Permite usar diferentes soluções de rede que atendem a diferentes requisitos de conectividade.
Escalabilidade: Garante que os pods possam se comunicar em clusters grandes e distribuídos.
Interoperabilidade: Padrão aberto compatível com diferentes plataformas e ferramentas.
Arquitetura de Rede CNI
A arquitetura básica de um cluster Kubernetes com CNI é:

API Server: O Kubernetes chama o plugin CNI para configurar a rede dos pods.
Kubelet: Coordena a criação do pod e solicita ao CNI a configuração da rede.
Plugin CNI: Implementa as configurações de rede e políticas necessárias.
Data Plane: Contém os pods, suas interfaces de rede e regras configuradas pelo CNI.